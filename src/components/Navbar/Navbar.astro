---
import type { NavLinkProps } from "./NavLink.astro";
import NavLink from "./NavLink.astro";
import { getCollection } from "astro:content";
import { SUPPORTED_LANGS, createLangHref, type Lang } from "@i18n/config";
import type { UIStrings } from "@i18n/dictionaries";

interface NavbarProps {
  lang: Lang;
  nav: UIStrings["nav"];
}

type Props = NavbarProps;

const { lang, nav } = Astro.props;

const articles = await getCollection("articles");

const slugToCanonicalByLang = Object.fromEntries(
  SUPPORTED_LANGS.map((code) => [code, {} as Record<string, string>])
) as Record<Lang, Record<string, string>>;

const canonicalToSlug: Record<string, Partial<Record<Lang, string>>> = {};

for (const article of articles) {
  const { canonicalSlug, slug } = article.data;
  const articleLang = article.data.lang as Lang;

  slugToCanonicalByLang[articleLang][slug] = canonicalSlug;
  (canonicalToSlug[canonicalSlug] ??= {})[articleLang] = slug;
}

const navLinks: NavLinkProps[] = [
  {
    href: createLangHref(lang, "#about"),
    text: nav.about,
  },
  {
    href: createLangHref(lang, "/blog"),
    text: nav.blog,
  },
  {
    href: createLangHref(lang, "#contact"),
    text: nav.contact,
  },
];

const { pathname, search, hash } = Astro.url;
const segments = pathname.split("/").filter(Boolean);
const currentLangSegment = segments[0];
const remainderSegments = segments.slice(currentLangSegment ? 1 : 0);
const remainder = remainderSegments.join("/");

function getLanguageHref(targetLang: Lang) {
  if (!remainder) {
    return `/${targetLang}`;
  }

  if (remainderSegments[0] === "blog" && remainderSegments.length > 1) {
    const currentSlug = remainderSegments[1]!;
    const canonical = slugToCanonicalByLang[lang]?.[currentSlug];

    if (canonical) {
      const targetSlug = canonicalToSlug[canonical]?.[targetLang];

      if (targetSlug) {
        const targetPath = `/${targetLang}/blog/${targetSlug}`;
        return `${targetPath}${search}${hash}`;
      }

      return `/${targetLang}/blog${search}${hash}`;
    }
  }

  const basePath = `/${targetLang}/${remainder}`;
  return `${basePath}${search}${hash}`;
}
---

<header
  class="fixed top-0 left-0 right-0 bg-white/90 backdrop-blur-sm border-b border-neutral-200 z-50"
>
  <nav class="max-w-4xl mx-auto px-6 py-4">
    <div
      class="flex flex-col items-center gap-4 sm:flex-row sm:justify-between"
    >
      <div class="flex justify-center items-center gap-6">
        {navLinks.map((props) => <NavLink {...props} />)}
      </div>

      <div
        class="flex items-center gap-2 text-sm text-neutral-600 uppercase tracking-wide"
        aria-label={nav.languageSwitcherLabel}
      >
        {
          SUPPORTED_LANGS.map((code) => (
            <a
              href={getLanguageHref(code)}
              class={
                code === lang
                  ? "text-neutral-900 font-semibold"
                  : "hover:text-neutral-900 transition-colors"
              }
            >
              {code.toUpperCase()}
            </a>
          ))
        }
      </div>
    </div>
  </nav>
</header>
